buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'net.linguica.gradle:maven-settings-plugin:0.5'
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.14.0"
    id 'net.researchgate.release' version '2.6.0'
}


allprojects {
    ext.currentYear = Calendar.getInstance().get(Calendar.YEAR)
    ext.copyright = "Copyright (C) $inceptionYear - $currentYear $organization"
    ext.projectName = 'UI Localizer'

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'net.linguica.maven-settings'
    group = 'com.devexperts.uilocalizer'

    release {
        failOnCommitNeeded = false
        failOnPublishNeeded = false
        failOnSnapshotDependencies = false
        failOnUnversionedFiles = false
        failOnUpdateNeeded = true
        revertOnFail = true
        preCommitText = ''
        tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
        newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
        tagTemplate = '${version}'
        versionPropertyFile = 'gradle.properties'
        versionProperties = []
        buildTasks = ['license', 'build', 'javadocJar', 'sourcesJar']
        scmAdapters = [
                net.researchgate.release.GitAdapter,
        ]

        git {
            //requireBranch = 'gradleReleasePreparations'
            //pushToRemote = 'origin'
            pushToBranchPrefix = ''
            commitVersionFileOnly = false
            signTag = false
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    beforeReleaseBuild.dependsOn publishToMavenLocal
}

//temporary workaround to dodge licensing issues
configure(subprojects - project(':uilocalizer-processor-functionaltest')) {
    apply plugin: 'license'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    license {
        ext.name = projectName
        ext.copyright = copyright
        strictCheck true
        header rootProject.file('src/license/mpl_2.0/header.txt')
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
        excludes(["**/*.properties", "inspectionDescriptions/NonLocalizedString.html", "**/*.xml"])
    }

    jar {
        manifest {
            attributes 'Implementation-Title': projectName + ': ' + project.name,
                    'Implementation-Version': version,
                    'Copyright': copyright,
                    'Built-by': System.getProperty('user.name'),
                    'Build-JDK': System.getProperty('java.version'),
                    'Source-Compatibity': sourceCompatibility,
                    'Target-Compatibity': targetCompatibility
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar {
                    classifier "sources"
                }
                artifact javadocJar

                pom.withXml {
                    // remove api from dependencies
                    Node pomNode = asNode()
                    pomNode.dependencies.'*'.findAll() {
                        it.artifactId.text() == 'uilocalizer-api'
                    }.each() {
                        it.parent().remove(it)
                    }
                    // append additional metadata
                    asNode().children().last() + {
                        resolveStrategy = Closure.DELEGATE_FIRST

                        inceptionYear inceptionYear
                        organization {
                            name organization
                            url 'http://www.devexperts.com/'
                        }
                        scm {
                            connection 'scm:git:https://github.com/Devexperts/uilocalizer.git'
                            developerConnection 'scm:git:git@github.com/Devexperts/uilocalizer.git'
                            tag 'HEAD'
                            url 'https://github.com/Devexperts/uilocalizer.git'
                        }
                        issueManagement {
                            url 'https://github.com/Devexperts/uilocalizer/issues'
                        }
                        licenses {
                            license {
                                name 'MPL 2.0'
                                url 'http://mozilla.org/MPL/2.0/'
                                distribution 'repo'
                            }
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                if (version.endsWith('SNAPSHOT')) {
                    name 'evolution-snapshots'
                    url 'https://maven.in.devexperts.com/content/repositories/evolution-snapshot/'
                } else {
                    name 'evolution'
                    url 'https://maven.in.devexperts.com/content/repositories/evolution/'
                }
            }
        }
    }

    repositories {
        maven { url "https://dl.bintray.com/devexperts/Maven" }
        maven { url "https://repo.maven.apache.org/maven2" }
    }
}
